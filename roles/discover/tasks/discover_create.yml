---

- name: Generate random UUID
  shell: uuidgen
  register: uuid_name

- name: Set uuid fact
  set_fact:
     server_name: "{{ uuid_name.stdout | replace('-','') }}"

- name: Create server record with inventory
  uri:
    url: "{{ ansible_cmdline.craton_url }}/hosts"
    method: POST
    body: '{"cloud_id": 1, "region_id": 1, "cell_id": 1, "name": "{{ server_name }}", "ip_address": "10.127.5.111", "device_type": "server"}'
    body_format: json
    status_code: 201
    headers:
      X-Auth-User: "{{ ansible_cmdline.craton_username }}"
      X-Auth-Token: "{{ ansible_cmdline.craton_password }}"
      X-Auth-Project: "{{ ansible_cmdline.craton_project }}"
      Content-Type: application/json
  register: server_created

- name: Set new_host_id to newly created host
  set_fact:
    new_host_id: "{{ server_created.json.id }}"
  when:
    - server_created.json.id is defined

- debug:
    msg: "Created Host ID: {{ new_host_id }} in Craton"
  when:
    - new_host_id is defined

- name: Update server name to new_host_id
  uri:
    url: "{{ ansible_cmdline.craton_url }}/hosts/{{ new_host_id }}"
    method: PUT
    body: '{"name": "server-{{ new_host_id }}"}'
    body_format: json
    status_code: 200
    headers:
      X-Auth-User: "{{ ansible_cmdline.craton_username }}"
      X-Auth-Token: "{{ ansible_cmdline.craton_password }}"
      X-Auth-Project: "{{ ansible_cmdline.craton_project }}"
      Content-Type: application/json
  when:
    - new_host_id is defined

- name: Register Server's LLDP values
  uri:
    url: "{{ ansible_cmdline.craton_url }}/hosts/{{ new_host_id }}/variables"
    method: PUT
    body: '{"lldp": {{ lldp | to_json }}}'
    body_format: json
    status_code: 200
    headers:
      X-Auth-User: "{{ ansible_cmdline.craton_username }}"
      X-Auth-Token: "{{ ansible_cmdline.craton_password }}"
      X-Auth-Project: "{{ ansible_cmdline.craton_project }}"
      Content-Type: application/json
  when:
    - new_host_id is defined

- name: Register Servers MAC Addresses
  uri:
    url: "{{ ansible_cmdline.craton_url }}/hosts/{{ new_host_id }}/variables"
    method: PUT
    body: '{"macs": {{ hardware_macs | to_json }}}'
    body_format: json
    status_code: 200
    headers:
      X-Auth-User: "{{ ansible_cmdline.craton_username }}"
      X-Auth-Token: "{{ ansible_cmdline.craton_password }}"
      X-Auth-Project: "{{ ansible_cmdline.craton_project }}"
      Content-Type: application/json
  when:
    - new_host_id is defined

- name: push up variables for testing
  uri:
    url: "{{ ansible_cmdline.craton_url }}/hosts/{{ new_host_id }}/variables"
    method: PUT
    body: "{\"{{ item.key }}\": \"{{ item.value }}\" }"
    body_format: json
    status_code: 200
    headers:
      X-Auth-User: "{{ ansible_cmdline.craton_username }}"
      X-Auth-Token: "{{ ansible_cmdline.craton_password }}"
      X-Auth-Project: "{{ ansible_cmdline.craton_project }}"
      Content-Type: application/json
  when:
    - new_host_id is defined
  with_items:
    - { key: 'ecopoiesis_bootstrapped', value: 'None' }
    - { key: 'ecopoiesis_boot_os', value: 'ubuntu' }
    - { key: 'ecopoiesis_boot_os_version', value: 'xenial' }
    - { key: 'ecopoiesis_boot_status', value: 'provision' }
    - { key: 'ecopoiesis_operational_status', value: 'None' }
    - { key: 'ecopoiesis_enforce_firmware', value: 'false' }
    - { key: 'datacenter', value: 'dfw' }
    - { key: 'primary_dns', value: '8.8.8.8' }
    - { key: 'secondary_dns', value: '8.8.4.4' }
    - { key: 'mgmt_ip_address', value: '1.2.3.4' }
    - { key: 'mgmt_gateway_ip', value: '1.2.3.1' }
    - { key: 'mgmt_netmask', value: '255.255.255.0' }
    - { key: 'server_name', value: 'this.is.a.test.com' }
